{
  "src/lib/components/Accordion.react.js": {
    "description": "",
    "displayName": "CustomAccordion",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "panels": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "id": {
                "name": "string",
                "required": true
              },
              "summary": {
                "name": "string",
                "required": true
              },
              "details": {
                "name": "string",
                "required": true
              },
              "expanded": {
                "name": "bool",
                "required": false
              },
              "defaultExpanded": {
                "name": "bool",
                "required": false
              },
              "actions": {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "label": {
                      "name": "string",
                      "required": true
                    },
                    "onClick": {
                      "name": "func",
                      "required": false
                    }
                  }
                },
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "An array of panel objects to be rendered in the accordion.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/AutoLayout.react.js": {
    "description": "",
    "displayName": "AutoLayout",
    "methods": [
      {
        "name": "Item",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "{ children, size, ...other }",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the layout."
      },
      "spacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Defines the space between the type `item` components.",
        "defaultValue": {
          "value": "3",
          "computed": false
        }
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'row'",
              "computed": false
            },
            {
              "value": "'row-reverse'",
              "computed": false
            },
            {
              "value": "'column'",
              "computed": false
            },
            {
              "value": "'column-reverse'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `flex-direction` style property.",
        "defaultValue": {
          "value": "'row'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Button.react.js": {
    "description": "Button component using Material-UI.\nIt can be customized with various optional props to change its appearance and behavior.\nThe 'id' prop is required.",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the button."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'text'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'contained'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'info'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component."
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The size of the component."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will be disabled."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will take up the full width of its container."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked."
      },
      "startIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Element placed before the children."
      },
      "endIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Element placed after the children."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of times the button has been clicked.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the button is clicked."
      }
    }
  },
  "src/lib/components/Calculator.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Calculator",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result of the calculation."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Card.react.js": {
    "description": "",
    "displayName": "CustomCard",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The title of the card.",
        "defaultValue": {
          "value": "'Word of the Day'",
          "computed": false
        }
      },
      "subtitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The subtitle of the card.",
        "defaultValue": {
          "value": "'benevolent'",
          "computed": false
        }
      },
      "mainContent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The main content of the card.",
        "defaultValue": {
          "value": "'adjective'",
          "computed": false
        }
      },
      "secondaryContent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The secondary content of the card.",
        "defaultValue": {
          "value": "'well meaning and kindly.\\n\"a benevolent smile\"'",
          "computed": false
        }
      },
      "buttonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text for the button.",
        "defaultValue": {
          "value": "'Learn More'",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of times the button has been clicked.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/CheckBoxTable.react.js": {
    "description": "CheckBoxTable is a component that displays data in a tabular format with checkboxes.\nIt takes properties `data` and `columns` which define the table structure and content.",
    "displayName": "CheckBoxTable",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "The data to be displayed in the table.\nIt should be an array of objects, where each object represents a row.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "columns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "field": {
                "name": "string",
                "required": true
              },
              "headerName": {
                "name": "string",
                "required": true
              },
              "width": {
                "name": "number",
                "required": false
              },
              "type": {
                "name": "string",
                "required": false
              },
              "description": {
                "name": "string",
                "required": false
              },
              "sortable": {
                "name": "bool",
                "required": false
              },
              "valueGetter": {
                "name": "func",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "The column definitions for the table.\nIt should be an array of objects, where each object defines a column.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/DashMaterialUI.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "DashMaterialUI",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A label that will be printed when this component is rendered."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value displayed in the input."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/SecondComponent.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "SecondComponent",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A label that will be printed when this component is rendered."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value displayed in the input."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Table.react.js": {
    "description": "Table is a component that displays data in a tabular format.\nIt takes a property `data` which is an array of objects representing the table rows.",
    "displayName": "MUITable",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "The data to be displayed in the table.\nIt should be an array of objects, where each object represents a row.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  }
}